# Load the dataset
df <- read.csv("hotel_bookings.csv")
View(df)
View(df)
# Convert the arrival date columns into a single date column
df$arrival_date <- make_date(df$arrival_date_year, match(df$arrival_date_month, month.name), df$arrival_date_day_of_month)
# Aggregate data to get monthly bookings
df <- df %>%
mutate(bookings = 1) %>%  # Add a column to represent each booking
group_by(year = year(arrival_date), month = month(arrival_date)) %>%
summarize(total_bookings = sum(bookings))
View(df)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(lubridate)
library(forecast)
# Load necessary libraries
library(dplyr)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("tidyverse")
install.packages('forecast', dependencies = TRUE)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(lubridate)
library(forecast)
# Load the dataset
df <- read.csv("hotel_bookings.csv")
# Convert the arrival date columns into a single date column
df$arrival_date <- make_date(df$arrival_date_year, match(df$arrival_date_month, month.name), df$arrival_date_day_of_month)
# Aggregate data to get monthly bookings
df <- df %>%
mutate(bookings = 1) %>%  # Add a column to represent each booking
group_by(year = year(arrival_date), month = month(arrival_date)) %>%
summarize(total_bookings = sum(bookings))
# Create a time series object for the total bookings
ts_data <- ts(df$total_bookings, start = c(min(df$year), min(df$month)), frequency = 12)
# Plot the time series
autoplot(ts_data) +
ggtitle("Monthly Hotel Bookings Over Time") +
xlab("Year") + ylab("Total Bookings")
# Train a forecasting model (ARIMA)
model <- auto.arima(ts_data)
# Forecast for the next 5 month
forecast_result <- forecast(model, h = 10)
# Plot the forecast
autoplot(forecast_result) +
ggtitle("5-Month Forecast of Hotel Bookings") +
xlab("Year") + ylab("Forecasted Bookings")
# Print the forecasted bookings
print(forecast_result)
# Forecast for the next 5 month
forecast_result <- forecast(model, h = 5)
# Plot the forecast
autoplot(forecast_result) +
ggtitle("5-Month Forecast of Hotel Bookings") +
xlab("Year") + ylab("Forecasted Bookings")
# Print the forecasted bookings
print(forecast_result)
# Forecast for the next 5 month
forecast_result <- forecast(model, h = 20)
# Plot the forecast
autoplot(forecast_result) +
ggtitle("5-Month Forecast of Hotel Bookings") +
xlab("Year") + ylab("Forecasted Bookings")
# Print the forecasted bookings
print(forecast_result)
# Forecast for the next 5 month
forecast_result <- forecast(model, h = 40)
# Plot the forecast
autoplot(forecast_result) +
ggtitle("5-Month Forecast of Hotel Bookings") +
xlab("Year") + ylab("Forecasted Bookings")
# Print the forecasted bookings
print(forecast_result)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(lubridate)
library(forecast)
ou# Load the dataset
df <- read.csv("hotel_bookings.csv")
# Check the structure and column names
str(df)
print(colnames(df))
# Print a sample of the first few rows to inspect the dataset
print(head(df))
# Convert columns to numeric where necessary
df$arrival_date_year <- as.numeric(as.character(df$arrival_date_year))
df$arrival_date_month <- as.numeric(as.character(df$arrival_date_month))
# Create the arrival_date column using only valid numeric data
df <- df %>%
filter(!is.na(arrival_date_year) & !is.na(arrival_date_month)) %>%
mutate(arrival_date = as.Date(paste(arrival_date_year, arrival_date_month, "01", sep = "-")))
# Check if arrival_date was created successfully
if ("arrival_date" %in% colnames(df)) {
print(head(df$arrival_date))  # Verify the first few dates
} else {
stop("arrival_date column was not created successfully.")
}
print(head(df$arrival_date))  # Verify the first few dates
# Check if arrival_date was created successfully
if ("arrival_date" %in% colnames(df)) {
print(head(df$arrival_date))  # Verify the first few dates
} else {
stop("arrival_date column was not created successfully.")
}
# Aggregate the data to get monthly total bookings
df_monthly <- df %>%
group_by(year = year(arrival_date), month = month(arrival_date)) %>%
summarize(total_bookings = n(), .groups = 'drop')
# Check if df_monthly has data
if (nrow(df_monthly) == 0) {
stop("No data available in df_monthly after filtering and aggregation.")
}
# Create a time series object for total bookings
ts_data <- ts(df_monthly$total_bookings, start = c(min(df_monthly$year), min(df_monthly$month)), frequency = 12)
# Predict the next 5 months of hotel bookings
model <- auto.arima(ts_data)
forecast_result <- forecast(model, h = 5)
# Plot the forecast for the next 5 months
autoplot(forecast_result) +
ggtitle("5-Month Forecast of Hotel Bookings") +
xlab("Year") + ylab("Forecasted Bookings")
# Check for future bookings by aggregating data for the next 5 months
future_bookings <- df %>%
filter(arrival_date >= Sys.Date()) %>%
group_by(room_type) %>%  # Replace with actual room type column name
summarize(total_future_bookings = n(), .groups = 'drop') %>%
arrange(desc(total_future_bookings))
# Check if future_bookings has data
if (nrow(future_bookings) == 0) {
stop("No future bookings data available.")
}
# Print the most booked room types in descending order
cat("Room types booked in the next 5 months (most to least):\n")
print(future_bookings)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(lubridate)
library(forecast)
ou# Load the dataset
library(ggplot2)
library(lubridate)
library(forecast)
# Load the dataset
df <- read.csv("hotel_bookings.csv")
# Check the structure and column names
str(df)
print(colnames(df))
# Print a sample of the first few rows to inspect the dataset
print(head(df))
# Convert columns to numeric where necessary
df$arrival_date_year <- as.numeric(as.character(df$arrival_date_year))
df$arrival_date_month <- as.numeric(as.character(df$arrival_date_month))
# Create the arrival_date column using only valid numeric data
df <- df %>%
filter(!is.na(arrival_date_year) & !is.na(arrival_date_month)) %>%
mutate(arrival_date = as.Date(paste(arrival_date_year, arrival_date_month, "01", sep = "-")))
# Check if arrival_date was created successfully
if ("arrival_date" %in% colnames(df)) {
print(head(df$arrival_date))  # Verify the first few dates
} else {
stop("arrival_date column was not created successfully.")
}
# Aggregate the data to get monthly total bookings
df_monthly <- df %>%
group_by(year = year(arrival_date), month = month(arrival_date)) %>%
summarize(total_bookings = n(), .groups = 'drop')
# Check if arrival_date was created successfully
if ("arrival_date" %in% colnames(df)) {
print(head(df$arrival_date))  # Verify the first few dates
} else {
stop("arrival_date column was not created successfully.")
}
